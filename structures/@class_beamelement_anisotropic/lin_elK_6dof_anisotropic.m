%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% Authors: Klaus Seywald (klaus.seywald@mytum.de) 
%          and Simon Binder (simon.binder@tum.de)
% 
% This file is part of dAEDalusNXT (https://github.com/seyk86/dAEDalusNXT)
%
% This function calculates the stiffness matrix of objects belonging to
% class_beamelement_anisotropic.

% It is a re-adaptation of lin_elK_6dof. This one is able to handle
% anisotropic materials (as well as isotropic ones of course, provided that
% they are properly defined).

function obj=lin_elK_6dof_anisotropic(obj)


    L = obj.le;
    
   %% timoshenko stiffness matrix
       C=obj.crosssection.S6;
    
    K=[C(1,1)/L,C(1,2)/L,C(1,3)/L,C(1,4)/L,C(1,5)/L-C(1,3)/2,C(1,2)/2+C(1,6)/L,-C(1,1)/L,-C(1,2)/L,-C(1,3)/L,-C(1,4)/L,-C(1,3)/2-C(1,5)/L,C(1,2)/2-C(1,6)/L,0,0,0,0,0,0,-C(1,3)/6,C(1,2)/6;
    C(1,2)/L,C(2,2)/L,C(2,3)/L,C(2,4)/L,C(2,5)/L-C(2,3)/2,C(2,2)/2+C(2,6)/L,-C(1,2)/L,-C(2,2)/L,-C(2,3)/L,-C(2,4)/L,-C(2,3)/2-C(2,5)/L,C(2,2)/2-C(2,6)/L,0,0,0,0,0,0,-C(2,3)/6,C(2,2)/6;
    C(1,3)/L,C(2,3)/L,C(3,3)/L,C(3,4)/L,C(3,5)/L-C(3,3)/2,C(2,3)/2+C(3,6)/L,-C(1,3)/L,-C(2,3)/L,-C(3,3)/L,-C(3,4)/L,-C(3,3)/2-C(3,5)/L,C(2,3)/2-C(3,6)/L,0,0,0,0,0,0,-C(3,3)/6,C(2,3)/6;
    C(1,4)/L,C(2,4)/L,C(3,4)/L,C(4,4)/L,C(4,5)/L-C(3,4)/2,C(2,4)/2+C(4,6)/L,-C(1,4)/L,-C(2,4)/L,-C(3,4)/L,-C(4,4)/L,-C(3,4)/2-C(4,5)/L,C(2,4)/2-C(4,6)/L,0,0,0,0,0,0,-C(3,4)/6,C(2,4)/6;
    C(1,5)/L-C(1,3)/2,C(2,5)/L-C(2,3)/2,C(3,5)/L-C(3,3)/2,C(4,5)/L-C(3,4)/2,(L*C(3,3))/3-C(3,5)+C(5,5)/L,C(2,5)/2-C(3,6)/2-(L*C(2,3))/3+C(5,6)/L,C(1,3)/2-C(1,5)/L,C(2,3)/2-C(2,5)/L,C(3,3)/2-C(3,5)/L,C(3,4)/2-C(4,5)/L,(L*C(3,3))/6-C(5,5)/L,C(2,5)/2+C(3,6)/2-(L*C(2,3))/6-C(5,6)/L,C(2,3)/6,C(3,3)/6,0,0,C(1,3)/6,C(3,4)/6,(L*C(3,3))/12,C(2,5)/6+C(3,6)/6-(L*C(2,3))/12;
    C(1,2)/2+C(1,6)/L,C(2,2)/2+C(2,6)/L,C(2,3)/2+C(3,6)/L,C(2,4)/2+C(4,6)/L,C(2,5)/2-C(3,6)/2-(L*C(2,3))/3+C(5,6)/L,C(2,6)+(L*C(2,2))/3+C(6,6)/L,-C(1,2)/2-C(1,6)/L,-C(2,2)/2-C(2,6)/L,-C(2,3)/2-C(3,6)/L,-C(2,4)/2-C(4,6)/L,-C(2,5)/2-C(3,6)/2-(L*C(2,3))/6-C(5,6)/L,(L*C(2,2))/6-C(6,6)/L,-C(2,2)/6,-C(2,3)/6,0,0,-C(1,2)/6,-C(2,4)/6,-C(2,5)/6-C(3,6)/6-(L*C(2,3))/12,(L*C(2,2))/12;
    -C(1,1)/L,-C(1,2)/L,-C(1,3)/L,-C(1,4)/L,C(1,3)/2-C(1,5)/L,-C(1,2)/2-C(1,6)/L,C(1,1)/L,C(1,2)/L,C(1,3)/L,C(1,4)/L,C(1,3)/2+C(1,5)/L,C(1,6)/L-C(1,2)/2,0,0,0,0,0,0,C(1,3)/6,-C(1,2)/6;
    -C(1,2)/L,-C(2,2)/L,-C(2,3)/L,-C(2,4)/L,C(2,3)/2-C(2,5)/L,-C(2,2)/2-C(2,6)/L,C(1,2)/L,C(2,2)/L,C(2,3)/L,C(2,4)/L,C(2,3)/2+C(2,5)/L,C(2,6)/L-C(2,2)/2,0,0,0,0,0,0,C(2,3)/6,-C(2,2)/6;
    -C(1,3)/L,-C(2,3)/L,-C(3,3)/L,-C(3,4)/L,C(3,3)/2-C(3,5)/L,-C(2,3)/2-C(3,6)/L,C(1,3)/L,C(2,3)/L,C(3,3)/L,C(3,4)/L,C(3,3)/2+C(3,5)/L,C(3,6)/L-C(2,3)/2,0,0,0,0,0,0,C(3,3)/6,-C(2,3)/6;
    -C(1,4)/L,-C(2,4)/L,-C(3,4)/L,-C(4,4)/L,C(3,4)/2-C(4,5)/L,-C(2,4)/2-C(4,6)/L,C(1,4)/L,C(2,4)/L,C(3,4)/L,C(4,4)/L,C(3,4)/2+C(4,5)/L,C(4,6)/L-C(2,4)/2,0,0,0,0,0,0,C(3,4)/6,-C(2,4)/6;
    -C(1,3)/2-C(1,5)/L,-C(2,3)/2-C(2,5)/L,-C(3,3)/2-C(3,5)/L,-C(3,4)/2-C(4,5)/L,(L*C(3,3))/6-C(5,5)/L,-C(2,5)/2-C(3,6)/2-(L*C(2,3))/6-C(5,6)/L,C(1,3)/2+C(1,5)/L,C(2,3)/2+C(2,5)/L,C(3,3)/2+C(3,5)/L,C(3,4)/2+C(4,5)/L,C(3,5)+(L*C(3,3))/3+C(5,5)/L,C(3,6)/2-C(2,5)/2-(L*C(2,3))/3+C(5,6)/L,-C(2,3)/6,-C(3,3)/6,0,0,-C(1,3)/6,-C(3,4)/6,(L*C(3,3))/12,-C(2,5)/6-C(3,6)/6-(L*C(2,3))/12;
    C(1,2)/2-C(1,6)/L,C(2,2)/2-C(2,6)/L,C(2,3)/2-C(3,6)/L,C(2,4)/2-C(4,6)/L,C(2,5)/2+C(3,6)/2-(L*C(2,3))/6-C(5,6)/L,(L*C(2,2))/6-C(6,6)/L,C(1,6)/L-C(1,2)/2,C(2,6)/L-C(2,2)/2,C(3,6)/L-C(2,3)/2,C(4,6)/L-C(2,4)/2,C(3,6)/2-C(2,5)/2-(L*C(2,3))/3+C(5,6)/L,(L*C(2,2))/3-C(2,6)+C(6,6)/L,C(2,2)/6,C(2,3)/6,0,0,C(1,2)/6,C(2,4)/6,C(2,5)/6+C(3,6)/6-(L*C(2,3))/12,(L*C(2,2))/12;
    0,0,0,0,C(2,3)/6,-C(2,2)/6,0,0,0,0,-C(2,3)/6,C(2,2)/6,C(2,2)/(3*L),C(2,3)/(3*L),0,0,C(1,2)/(3*L),C(2,4)/(3*L),C(2,5)/(3*L),C(2,6)/(3*L);
    0,0,0,0,C(3,3)/6,-C(2,3)/6,0,0,0,0,-C(3,3)/6,C(2,3)/6,C(2,3)/(3*L),C(3,3)/(3*L),0,0,C(1,3)/(3*L),C(3,4)/(3*L),C(3,5)/(3*L),C(3,6)/(3*L);
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,C(2,2)/(20*L),C(2,3)/(20*L),0,0,-C(2,3)/60,C(2,2)/60;
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,C(2,3)/(20*L),C(3,3)/(20*L),0,0,-C(3,3)/60,C(2,3)/60;
    0,0,0,0,C(1,3)/6,-C(1,2)/6,0,0,0,0,-C(1,3)/6,C(1,2)/6,C(1,2)/(3*L),C(1,3)/(3*L),0,0,C(1,1)/(3*L),C(1,4)/(3*L),C(1,5)/(3*L),C(1,6)/(3*L);
    0,0,0,0,C(3,4)/6,-C(2,4)/6,0,0,0,0,-C(3,4)/6,C(2,4)/6,C(2,4)/(3*L),C(3,4)/(3*L),0,0,C(1,4)/(3*L),C(4,4)/(3*L),C(4,5)/(3*L),C(4,6)/(3*L);
    -C(1,3)/6,-C(2,3)/6,-C(3,3)/6,-C(3,4)/6,(L*C(3,3))/12,-C(2,5)/6-C(3,6)/6-(L*C(2,3))/12,C(1,3)/6,C(2,3)/6,C(3,3)/6,C(3,4)/6,(L*C(3,3))/12,C(2,5)/6+C(3,6)/6-(L*C(2,3))/12,C(2,5)/(3*L),C(3,5)/(3*L),-C(2,3)/60,-C(3,3)/60,C(1,5)/(3*L),C(4,5)/(3*L),(L*C(3,3))/30+C(5,5)/(3*L),C(5,6)/(3*L)-(L*C(2,3))/30;
    C(1,2)/6,C(2,2)/6,C(2,3)/6,C(2,4)/6,C(2,5)/6+C(3,6)/6-(L*C(2,3))/12,(L*C(2,2))/12,-C(1,2)/6,-C(2,2)/6,-C(2,3)/6,-C(2,4)/6,-C(2,5)/6-C(3,6)/6-(L*C(2,3))/12,(L*C(2,2))/12,C(2,6)/(3*L),C(3,6)/(3*L),C(2,2)/60,C(2,3)/60,C(1,6)/(3*L),C(4,6)/(3*L),C(5,6)/(3*L)-(L*C(2,3))/30,(L*C(2,2))/30+C(6,6)/(3*L)];

    %%
    %Guyan reduction
    Kmm=K(1:12,1:12);
    Kms=K(1:12,13:20);
    Ksm=K(13:20,1:12);
    Kss=K(13:20,13:20);
    Ke=Kmm-Kms*Kss^-1*Ksm;
    %change  x -> y and y -> x axis to get the stiffness matrix in the beam element coordinate system of dAEDalus
    obj.elK=Ke([2 1 3 5 4 6 8 7 9 11 10 12],[2 1 3 5 4 6 8 7 9 11 10 12]);
    %flip coupling terms
    obj.elK=kron(ones(2,2),[-1 -1 -1 1 1 1]'*[-1 -1 -1 1 1 1]).*obj.elK;
    %Calculate Element Stiffness Matrices in Global Coordinates
    obj.elKglobal=obj.T'*obj.elK*obj.T;
    
end
